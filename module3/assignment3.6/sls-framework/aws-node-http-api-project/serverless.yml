org: alanpntusctp # Organization name for Serverless framework
app: ap-serverless-i # Application name in Serverless framework

stages:
  dev:
    observability: true # Enable observability (e.g., logging, metrics, traces) for the dev stage

service: alanp-aws-node-http-api-project # Service name for the project
frameworkVersion: '4' # Specifies the Serverless framework version to use

provider:
  name: aws # Cloud provider is AWS
  runtime: nodejs18.x # Specifies Node.js 18.x runtime for Lambda functions
  region: us-east-1
#  profile: serverless # AWS CLI profile to use for deployment

functions:
  hello: # Define a Lambda function called 'hello'
    handler: index.handler # The file and method to be invoked for this function
    events:
    - httpApi: # Event trigger is HTTP API
        path: / # Function is triggered when the root path is accessed
        method: get # HTTP GET method to trigger the function

# Insert raw CloudFormation (resources, outputsâ€¦) in the deployed template
resources:
  Resources:
    usersTable: # Define a DynamoDB table named 'usersTable'
      Type: AWS::DynamoDB::Table # Specifies the resource type as a DynamoDB table
      Properties:
        TableName: apusersTable # DynamoDB table name
        AttributeDefinitions: # Define attributes of the table
        - AttributeName: email # The email attribute serves as the key
          AttributeType: S # 'S' indicates the attribute type is a string
        KeySchema: # Define the primary key schema
        - AttributeName: email # The primary key is the 'email' attribute
          KeyType: HASH # 'HASH' specifies the partition key
        ProvisionedThroughput: # Set read and write capacity for the table
          ReadCapacityUnits: 1 # 1 unit for read capacity
          WriteCapacityUnits: 1 # 1 unit for write capacity

plugins:
- serverless-offline # Plugin to run the Serverless framework locally for testing
